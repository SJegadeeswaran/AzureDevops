# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- none

variables:
  vmImageName: ubuntu-latest

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'install'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        effectivePomSkip: false
        sonarQubeRunAnalysis: false

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'package'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
  
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**/*.war'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'GeneratedWars'
        publishLocation: 'Container'
    
    - task: Docker@2
      inputs:
        containerRegistry: 'jegregistry'
        repository: 'helloworld'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'v1'
    
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/manifests'
        artifact: 'manifests'
        publishLocation: 'pipeline'
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'

    - task: KubernetesManifest@0
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: 'jegcluster'
        namespace: 'default'
        secretType: 'dockerRegistry'
        secretName: 'secret'
        dockerRegistryEndpoint: 'jegregistry'
    
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'jegcluster'
        namespace: 'default'
        manifests: |
           $(Pipeline.Workspace)/manifests/deployment.yml
           $(Pipeline.Workspace)/manifests/service.yml